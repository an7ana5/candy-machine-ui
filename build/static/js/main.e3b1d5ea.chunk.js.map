{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","ACTIVE","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","CIVIC_GATEKEEPER_NETWORK","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","cluster","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","error","hideDuration","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","connected","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","Container","marginTop","maxWidth","position","paddingBottom","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","e","getCandyMachineId","clusterApiUrl","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","slot","confirmations","subId","Promise","resolve","reject","getSignatureStatuses","signatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","getProgramState","fetchIdl","idl","account","fetch","getCurrentBlockTime","getSlot","getBlockTime","all","currentBlockTime","timeDiff","id","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","sig","equals","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","onSignature","context"],"mappings":"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","file":"static/js/main.e3b1d5ea.chunk.js","sourcesContent":["import { Paper } from \"@material-ui/core\";\r\nimport Countdown from \"react-countdown\";\r\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n      padding: theme.spacing(0),\r\n      \"& > *\": {\r\n        margin: theme.spacing(0.4),\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignContent: \"center\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        background: \"#384457\",\r\n        color: \"white\",\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: \"flex\",\r\n      margin: 0,\r\n      marginBottom: theme.spacing(0.5),\r\n      height: theme.spacing(3.5),\r\n      padding: theme.spacing(1),\r\n      flexDirection: \"column\",\r\n      alignContent: \"center\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      background: \"#384457\",\r\n      color: \"white\",\r\n      borderRadius: 5,\r\n      fontWeight: \"bold\",\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: \"bold\",\r\n      fontSize: 18,\r\n    },\r\n  })\r\n);\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <span className={classes.done}>{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style}>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { CandyMachineAccount } from \"./candy-machine\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport {\r\n  findGatewayToken,\r\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\r\n  onGatewayTokenChange,\r\n  removeAccountChangeListener,\r\n} from \"@identity.com/solana-gateway-ts\";\r\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  setIsMinting,\r\n  isActive,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n  setIsMinting: (val: boolean) => void;\r\n  isActive: boolean;\r\n}) => {\r\n  const wallet = useWallet();\r\n  const connection = useConnection();\r\n  const [verified, setVerified] = useState(false);\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\r\n  const [clicked, setClicked] = useState(false);\r\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return \"SOLD OUT\";\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (\r\n      candyMachine?.state.isPresale ||\r\n      candyMachine?.state.isWhitelistOnly\r\n    ) {\r\n      return \"WHITELIST MINT\";\r\n    }\r\n\r\n    return \"MINT\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    const mint = async () => {\r\n      await removeAccountChangeListener(\r\n        connection.connection,\r\n        webSocketSubscriptionId\r\n      );\r\n      await onMint();\r\n\r\n      setClicked(false);\r\n      setVerified(false);\r\n    };\r\n    if (verified && clicked) {\r\n      mint();\r\n    }\r\n  }, [\r\n    verified,\r\n    clicked,\r\n    connection.connection,\r\n    onMint,\r\n    webSocketSubscriptionId,\r\n  ]);\r\n\r\n  const previousGatewayStatus = usePrevious(gatewayStatus);\r\n  useEffect(() => {\r\n    const fromStates = [\r\n      GatewayStatus.NOT_REQUESTED,\r\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\r\n    ];\r\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\r\n    if (\r\n      fromStates.find((state) => previousGatewayStatus === state) &&\r\n      !invalidToStates.find((state) => gatewayStatus === state)\r\n    ) {\r\n      setIsMinting(true);\r\n    }\r\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\r\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\r\n\r\n  useEffect(() => {\r\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\r\n      console.log(\"Minting after token active\");\r\n      setWaitForActiveToken(false);\r\n      onMint();\r\n    }\r\n  }, [waitForActiveToken, gatewayStatus, onMint]);\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={isMinting || !isActive}\r\n      onClick={async () => {\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          const network =\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\r\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\r\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n              await onMint();\r\n            } else {\r\n              // setIsMinting(true);\r\n              setWaitForActiveToken(true);\r\n              await requestGatewayToken();\r\n              console.log(\"after: \", gatewayStatus);\r\n            }\r\n          } else if (\r\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\r\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\r\n          ) {\r\n            setClicked(true);\r\n            const gatewayToken = await findGatewayToken(\r\n              connection.connection,\r\n              wallet.publicKey!,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork\r\n            );\r\n\r\n            if (gatewayToken?.isValid()) {\r\n              await onMint();\r\n            } else {\r\n              window.open(\r\n                `https://verify.encore.fans/?gkNetwork=${network}`,\r\n                \"_blank\"\r\n              );\r\n\r\n              const gatewayTokenAddress =\r\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\r\n                  wallet.publicKey!,\r\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\r\n                );\r\n\r\n              setWebSocketSubscriptionId(\r\n                onGatewayTokenChange(\r\n                  connection.connection,\r\n                  gatewayTokenAddress,\r\n                  () => setVerified(true),\r\n                  \"confirmed\"\r\n                )\r\n              );\r\n            }\r\n          } else {\r\n            setClicked(false);\r\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { Container, Snackbar } from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n} from \"@solana/web3.js\";\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CANDY_MACHINE_PROGRAM,\r\n  CandyMachineAccount,\r\n  createAccountsForMint,\r\n  getCandyMachineState,\r\n  getCollectionPDA,\r\n  mintOneToken,\r\n  SetupState,\r\n} from \"./candy-machine\";\r\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\r\nimport { MintCountdown } from \"./MintCountdown\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n  network: WalletAdapterNetwork;\r\n  error?: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isValidBalance, setIsValidBalance] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n  const cluster = props.network;\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(\r\n    async (commitment: Commitment = \"confirmed\") => {\r\n      if (!anchorWallet) {\r\n        return;\r\n      }\r\n      if (props.error !== undefined) {\r\n        setAlertState({\r\n          open: true,\r\n          message: props.error,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const connection = new Connection(props.rpcHost, commitment);\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet,\r\n            props.candyMachineId,\r\n            connection\r\n          );\r\n          console.log(\"Candy machine state: \", cndy);\r\n          let active = cndy?.state.goLiveDate\r\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\r\n            : false;\r\n          let presale = false;\r\n\r\n          // duplication of state to make sure we have the right values!\r\n          let isWLUser = false;\r\n          let userPrice = cndy.state.price;\r\n\r\n          // whitelist mint?\r\n          if (cndy?.state.whitelistMintSettings) {\r\n            // is it a presale mint?\r\n            if (\r\n              cndy.state.whitelistMintSettings.presale &&\r\n              (!cndy.state.goLiveDate ||\r\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n            ) {\r\n              presale = true;\r\n            }\r\n            // is there a discount?\r\n            if (cndy.state.whitelistMintSettings.discountPrice) {\r\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\r\n            } else {\r\n              setDiscountPrice(undefined);\r\n              // when presale=false and discountPrice=null, mint is restricted\r\n              // to whitelist users only\r\n              if (!cndy.state.whitelistMintSettings.presale) {\r\n                cndy.state.isWhitelistOnly = true;\r\n              }\r\n            }\r\n            // retrieves the whitelist token\r\n            const mint = new anchor.web3.PublicKey(\r\n              cndy.state.whitelistMintSettings.mint\r\n            );\r\n            const token = (\r\n              await getAtaForMint(mint, anchorWallet.publicKey)\r\n            )[0];\r\n\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n              isWLUser = parseInt(balance.value.amount) > 0;\r\n              // only whitelist the user if the balance > 0\r\n              setIsWhitelistUser(isWLUser);\r\n\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = isWLUser && (presale || active);\r\n              }\r\n            } catch (e) {\r\n              setIsWhitelistUser(false);\r\n              // no whitelist user, no mint\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = false;\r\n              }\r\n              console.log(\r\n                \"There was a problem fetching whitelist token balance\"\r\n              );\r\n              console.log(e);\r\n            }\r\n          }\r\n          userPrice = isWLUser ? userPrice : cndy.state.price;\r\n\r\n          if (cndy?.state.tokenMint) {\r\n            // retrieves the SPL token\r\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\r\n            const token = (\r\n              await getAtaForMint(mint, anchorWallet.publicKey)\r\n            )[0];\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n\r\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\r\n\r\n              // only allow user to mint if token balance >  the user if the balance > 0\r\n              setIsValidBalance(valid);\r\n              active = active && valid;\r\n            } catch (e) {\r\n              setIsValidBalance(false);\r\n              active = false;\r\n              // no whitelist user, no mint\r\n              console.log(\"There was a problem fetching SPL token balance\");\r\n              console.log(e);\r\n            }\r\n          } else {\r\n            const balance = new anchor.BN(\r\n              await connection.getBalance(anchorWallet.publicKey)\r\n            );\r\n            const valid = balance.gte(userPrice);\r\n            setIsValidBalance(valid);\r\n            active = active && valid;\r\n          }\r\n\r\n          // datetime to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.date) {\r\n            setEndDate(toDate(cndy.state.endSettings.number));\r\n            if (\r\n              cndy.state.endSettings.number.toNumber() <\r\n              new Date().getTime() / 1000\r\n            ) {\r\n              active = false;\r\n            }\r\n          }\r\n          // amount to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.amount) {\r\n            const limit = Math.min(\r\n              cndy.state.endSettings.number.toNumber(),\r\n              cndy.state.itemsAvailable\r\n            );\r\n            if (cndy.state.itemsRedeemed < limit) {\r\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n            } else {\r\n              setItemsRemaining(0);\r\n              cndy.state.isSoldOut = true;\r\n            }\r\n          } else {\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n          }\r\n\r\n          if (cndy.state.isSoldOut) {\r\n            active = false;\r\n          }\r\n\r\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n          const collectionPDAAccount = await connection.getAccountInfo(\r\n            collectionPDA\r\n          );\r\n\r\n          setIsActive((cndy.state.isActive = active));\r\n          setIsPresale((cndy.state.isPresale = presale));\r\n          setCandyMachine(cndy);\r\n\r\n          const txnEstimate =\r\n            892 +\r\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n            (cndy.state.tokenMint ? 66 : 0) +\r\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n            (cndy.state.gatekeeper ? 33 : 0) +\r\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n          setNeedTxnSplit(txnEstimate > 1230);\r\n        } catch (e) {\r\n          if (e instanceof Error) {\r\n            if (\r\n              e.message === `Account does not exist ${props.candyMachineId}`\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            } else if (\r\n              e.message.startsWith(\"failed to get info about account\")\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            }\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: `${e}`,\r\n              severity: \"error\",\r\n              hideDuration: null,\r\n            });\r\n          }\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n      }\r\n    },\r\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\r\n  );\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = []\r\n  ) => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign account setup transaction\",\r\n            severity: \"info\",\r\n          });\r\n          setupMint = await createAccountsForMint(\r\n            candyMachine,\r\n            wallet.publicKey\r\n          );\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                \"Setup transaction succeeded! Please sign minting transaction\",\r\n              severity: \"info\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Mint failed! Please try again!\",\r\n              severity: \"error\",\r\n            });\r\n            setIsUserMinting(false);\r\n            return;\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign minting transaction\",\r\n            severity: \"info\",\r\n          });\r\n        }\r\n\r\n        const mintResult = await mintOneToken(\r\n          candyMachine,\r\n          wallet.publicKey,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n          setupMint ?? setupTxn\r\n        );\r\n\r\n        let status: any = { err: true };\r\n        let metadataStatus = null;\r\n        if (mintResult) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintResult.mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true\r\n          );\r\n\r\n          metadataStatus =\r\n            await candyMachine.program.provider.connection.getAccountInfo(\r\n              mintResult.metadataKey,\r\n              \"processed\"\r\n            );\r\n          console.log(\"Metadata status: \", !!metadataStatus);\r\n        }\r\n\r\n        if (status && !status.err && metadataStatus) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          const remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setSetupTxn(undefined);\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n            hideDuration: 7000,\r\n          });\r\n          refreshCandyMachineState(\"processed\");\r\n        } else if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message:\r\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\r\n            severity: \"error\",\r\n            hideDuration: 8000,\r\n          });\r\n          refreshCandyMachineState();\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n          refreshCandyMachineState();\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n      // updates the candy machine state to reflect the latest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (function loop() {\r\n      setTimeout(() => {\r\n        refreshCandyMachineState();\r\n        loop();\r\n      }, 20000);\r\n    })();\r\n  }, [refreshCandyMachineState]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\r\n        <Paper\r\n          style={{\r\n            padding: 24,\r\n            paddingBottom: 10,\r\n            backgroundColor: \"#151A1F\",\r\n            borderRadius: 6,\r\n          }}\r\n        >\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <>\r\n              {candyMachine && (\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  wrap=\"nowrap\"\r\n                >\r\n                  <Grid item xs={3}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Remaining\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {`${itemsRemaining}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      {isWhitelistUser && discountPrice\r\n                        ? \"Discount Price\"\r\n                        : \"Price\"}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{ fontWeight: \"bold\" }}\r\n                    >\r\n                      {isWhitelistUser && discountPrice\r\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                        : `◎ ${formatNumber.asNumber(\r\n                            candyMachine.state.price\r\n                          )}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"endSettings\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: \"flex-end\" }}\r\n                          status=\"COMPLETED\"\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          align=\"center\"\r\n                          display=\"block\"\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        >\r\n                          TO END OF MINT\r\n                        </Typography>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"goLive\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: \"flex-end\" }}\r\n                          status={\r\n                            candyMachine?.state?.isSoldOut ||\r\n                            (endDate && Date.now() > endDate.getTime())\r\n                              ? \"COMPLETED\"\r\n                              : isPresale\r\n                              ? \"PRESALE\"\r\n                              : \"LIVE\"\r\n                          }\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        {isPresale &&\r\n                          candyMachine.state.goLiveDate &&\r\n                          candyMachine.state.goLiveDate.toNumber() >\r\n                            new Date().getTime() / 1000 && (\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: \"bold\" }}\r\n                            >\r\n                              UNTIL PUBLIC MINT\r\n                            </Typography>\r\n                          )}\r\n                      </>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              <MintContainer>\r\n                {candyMachine?.state.isActive &&\r\n                candyMachine?.state.gatekeeper &&\r\n                wallet.publicKey &&\r\n                wallet.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        wallet.publicKey ||\r\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      //@ts-ignore\r\n                      signTransaction: wallet.signTransaction,\r\n                    }}\r\n                    gatekeeperNetwork={\r\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                    }\r\n                    clusterUrl={rpcUrl}\r\n                    cluster={cluster}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      setIsMinting={(val) => setIsUserMinting(val)}\r\n                      onMint={onMint}\r\n                      isActive={\r\n                        isActive ||\r\n                        (isPresale && isWhitelistUser && isValidBalance)\r\n                      }\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    setIsMinting={(val) => setIsUserMinting(val)}\r\n                    onMint={onMint}\r\n                    isActive={\r\n                      isActive ||\r\n                      (isPresale && isWhitelistUser && isValidBalance)\r\n                    }\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n          <Typography\r\n            variant=\"caption\"\r\n            align=\"center\"\r\n            display=\"block\"\r\n            style={{ marginTop: 7, color: \"grey\" }}\r\n          >\r\n            Powered by METAPLEX\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={\r\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\r\n        }\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Home from \"./Home\";\r\nimport { DEFAULT_TIMEOUT } from \"./connection\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletExtensionWallet,\r\n  getSolletWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\r\n  } catch (e) {\r\n    console.log(\"Failed to construct CandyMachineId\", e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nlet error: string | undefined = undefined;\r\n\r\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\r\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\r\n}\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\r\n  \"devnet\") as WalletAdapterNetwork;\r\nconst rpcHost =\r\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={DEFAULT_TIMEOUT}\r\n              rpcHost={rpcHost}\r\n              network={network}\r\n              error={error}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from \"@project-serum/anchor\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { SystemProgram } from \"@solana/web3.js\";\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n  hideDuration?: number | null;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return \"--\";\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\r\n);\r\n\r\nexport const CIVIC_GATEKEEPER_NETWORK =\r\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\r\n    CIVIC\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from(\"gateway\"),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","/* eslint-disable */\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\r\nimport {\r\n  SystemProgram,\r\n  Transaction,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from \"@solana/web3.js\";\r\nimport { sendTransactions, SequenceType } from \"./connection\";\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from \"./utils\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\ninterface CandyMachineState {\r\n  authority: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: null | anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: null | anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n  retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  const subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    await connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"processed\",\r\n  });\r\n\r\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\r\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n    return [program, state];\r\n  };\r\n\r\n  const getCurrentBlockTime = async (): Promise<number> => {\r\n    const slot = await connection.getSlot();\r\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\r\n  };\r\n\r\n  const [[program, state], currentBlockTime] = await Promise.all([\r\n    getProgramState(),\r\n    getCurrentBlockTime(),\r\n  ]);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\r\n  const goLiveDate =\r\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      authority: state.authority,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n      retainAuthority: state.data.retainAuthority,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n  candyMachineAddress: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport interface CollectionData {\r\n  mint: anchor.web3.PublicKey;\r\n  candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n  mint: anchor.web3.PublicKey,\r\n  newAuthority: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"collection_authority\"),\r\n        newAuthority.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n  mint: anchor.web3.Keypair;\r\n  userTokenAccount: anchor.web3.PublicKey;\r\n  transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey\r\n): Promise<SetupState> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1\r\n    ),\r\n  ];\r\n\r\n  return {\r\n    mint: mint,\r\n    userTokenAccount: userTokenAccountAddress,\r\n    transaction: (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions],\r\n        [signers],\r\n        SequenceType.StopOnFailure,\r\n        \"singleGossip\",\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        [],\r\n        []\r\n      )\r\n    ).txs[0].txid,\r\n  };\r\n};\r\n\r\ntype MintResult = {\r\n  mintTxId: string;\r\n  metadataKey: anchor.web3.PublicKey;\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n  setupState?: SetupState\r\n): Promise<MintResult | null> => {\r\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const instructions = [];\r\n  const signers: anchor.web3.Keypair[] = [];\r\n  console.log(\"SetupState: \", setupState);\r\n  if (!setupState) {\r\n    signers.push(mint);\r\n    instructions.push(\r\n      ...[\r\n        anchor.web3.SystemProgram.createAccount({\r\n          fromPubkey: payer,\r\n          newAccountPubkey: mint.publicKey,\r\n          space: MintLayout.span,\r\n          lamports:\r\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n              MintLayout.span\r\n            ),\r\n          programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          0,\r\n          payer,\r\n          payer\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n          userTokenAccountAddress,\r\n          payer,\r\n          payer,\r\n          mint.publicKey\r\n        ),\r\n        Token.createMintToInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          userTokenAccountAddress,\r\n          payer,\r\n          [],\r\n          1\r\n        ),\r\n      ]\r\n    );\r\n  }\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: payer,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: payer,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress\r\n  );\r\n\r\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    })\r\n  );\r\n\r\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n  const collectionPDAAccount =\r\n    await candyMachine.program.provider.connection.getAccountInfo(\r\n      collectionPDA\r\n    );\r\n\r\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n    try {\r\n      const collectionData =\r\n        (await candyMachine.program.account.collectionPda.fetch(\r\n          collectionPDA\r\n        )) as CollectionData;\r\n      console.log(collectionData);\r\n      const collectionMint = collectionData.mint;\r\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n        collectionMint,\r\n        collectionPDA\r\n      );\r\n      console.log(collectionMint);\r\n      if (collectionMint) {\r\n        const collectionMetadata = await getMetadata(collectionMint);\r\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\r\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\r\n        instructions.push(\r\n          await candyMachine.program.instruction.setCollectionDuringMint({\r\n            accounts: {\r\n              candyMachine: candyMachineAddress,\r\n              metadata: metadataAddress,\r\n              payer: payer,\r\n              collectionPda: collectionPDA,\r\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n              collectionMint,\r\n              collectionMetadata,\r\n              collectionMasterEdition,\r\n              authority: candyMachine.state.authority,\r\n              collectionAuthorityRecord,\r\n            },\r\n          })\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const instructionsMatrix = [instructions];\r\n  const signersMatrix = [signers];\r\n\r\n  try {\r\n    const txns = (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        instructionsMatrix,\r\n        signersMatrix,\r\n        SequenceType.StopOnFailure,\r\n        \"singleGossip\",\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        beforeTransactions,\r\n        afterTransactions\r\n      )\r\n    ).txs.map((t) => t.txid);\r\n    const mintTxn = txns[0];\r\n    return {\r\n      mintTxId: mintTxn,\r\n      metadataKey: metadataAddress,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n","/* eslint-disable */\r\nimport {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const DEFAULT_TIMEOUT = 60000;\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, \"max\");\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach((log) => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][]\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  const toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          \"single\"\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          \"single\"\r\n        );\r\n        ids = ids.concat(txs.map((t) => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      \"Died on \",\r\n      stopPoint,\r\n      \"retrying from instruction\",\r\n      instructions[stopPoint],\r\n      \"instructions length is\",\r\n      instructions.length\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = \"singleGossip\",\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = []\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    const transaction = new Transaction();\r\n    instructions.forEach((instruction) => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map((s) => s.publicKey)\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\r\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n    partiallySignedTransactions\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n    \"Signed txns length\",\r\n    signedTxns.length,\r\n    \"vs handed in length\",\r\n    instructionSet.length\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n          successCallback(txid, i)\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log(\"Failed at txn index:\", i);\r\n        console.log(\"Caught failure:\", e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[] | Transaction,\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = \"singleGossip\",\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (!Array.isArray(instructions)) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach((instruction) => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n\r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map((s) => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map((s) => s.publicKey)\r\n      );\r\n    }\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  const options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = \"singleGossip\",\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach((instruction) => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map((s) => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map((s) => s.publicKey)\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    }\r\n  );\r\n\r\n  console.log(\"Started awaiting confirmation for\", txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      \"recent\",\r\n      true\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error(\"Transaction failed: Custom instruction error\");\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error(\"Timeout Error caught\", err);\r\n    if (err.timeout) {\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, \"single\")\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith(\"Program log: \")) {\r\n            throw new Error(\r\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString(\"base64\");\r\n  const config: any = { encoding: \"base64\", commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\r\n  if (res.error) {\r\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    await connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n"],"sourceRoot":""}